coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
View(p1)
View(p2)
View(fit)
View(dat)
View(newx)
View(dat)
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3))
require(datasets); data(swiss); ?swiss
require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
install.packages("GGally")
require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
library(GGally)
library(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
my_fn <- function(data, mapping, pts=list(), smt=list(), ...){
ggplot(data = data, mapping = mapping, ...) +
do.call(geom_point, pts) +
do.call(geom_smooth, smt)
}
# Plot
ggpairs(swiss[1:4],
lower = list(continuous =
wrap(my_fn,
pts=list(size=2, colour="red"),
smt=list(method="lm", se=F, size=5, colour="blue"))))
ggpairs(swiss[1:4],
lower = list(continuous =
wrap(my_fn,
pts=list(size=2, colour="red"),
smt=list(method="lm", se=F, size=1, colour="blue"))))
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
# Default loess curve
ggpairs(swiss[1:4], lower = list(continuous = my_fn))
g = ggpairs(swiss, lower = list(continuous = "smooth"))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), wrap(c(method = "loess"))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), wrap(method = "loess")
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), wrap(method = "loess"))
g = ggpairs(swiss, lower = list(continuous = "smooth"), wrap(ggallypoints, method = "loess"))
g = ggpairs(swiss, lower = list(continuous = "smooth"), wrap(ggally_points, method = "loess"))
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
# Default loess curve
ggpairs(swiss[1:4], lower = list(continuous = my_fn))
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
# Default loess curve
ggpairs(swiss[1:4], lower = list(continuous = "lm"))
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
# Default loess curve
ggpairs(swiss[1:4], lower = list(continuous = wrap(my_fn, method="lm")))
ggpairs(swiss[1:4], lower = list(continuous = wrap(my_fn))
)
summary(lm(Fertility ~ . , data = swiss))
summary(lm(Fertility ~ . , data = swiss))$coefficients
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = resid(lm(x1 ~ x2)))
library(ggplot2)
g = ggplot(dat, aes(y = y, x = x1, colour = x2))
g = g + geom_point(colour="grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black")
g = g + geom_point(size = 4)
g
g2 = ggplot(dat, aes(y = ey, x = ex1, colour = x2))
g2 = g2 + geom_point(colour="grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g2
z <- swiss$Agriculture + swiss$Education
lm(Fertility ~ . + z, data = swiss)
require(datasets);data(InsectSprays); require(stats); require(ggplot2)
g = ggplot(data = InsectSprays, aes(y = count, x = spray, fill  = spray))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of spray") + ylab("Insect count")
g
require(datasets);data(InsectSprays); require(stats); require(ggplot2)
g = ggplot(data = InsectSprays, aes(y = count, x = spray, fill  = spray))
g = g + geom_violin(colour = "black", size = 1)
g = g + xlab("Type of spray") + ylab("Insect count")
g
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays))$coef
summary(lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F')) + I(1 * (spray == 'A')), data = InsectSprays))$coef
summary(lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F')) + I(1 * (spray == 'A')), data = InsectSprays))$coef
summary(lm(count ~ spray - 1, data = InsectSprays))$coef
library(dplyr)
summarise(group_by(InsectSprays, spray), mn = mean(count))
spray2 <- relevel(InsectSprays$spray, "C")
summary(lm(count ~ spray2, data = InsectSprays))$coef
library(datasets); data(swiss)
head(swiss)
library(dplyr);
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = factor(CatholicBin)))
g = g + geom_point(size = 6, colour = "black") + geom_point(size = 4)
g = g + xlab("% in Agriculture") + ylab("Fertility")
g
summary(lm(Fertility ~ Agriculture, data = swiss))$coef
fit = lm(Fertility ~ Agriculture, data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
summary(lm(Fertility ~ Agriculture + Agriculture : factor(CatholicBin), data = swiss))$coef
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
install.packages("rgl")
?influence.measures
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
install.packages("car")
library(car)
vif(fit)
sqrt(vif(fit))
fit1 = lm(Fertility~Agriculture, swiss)
fit2 = lm(Fertility~Agriculture+Examination+Education, swiss)
fit3 = lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality, swiss)
anova(fit1, fit2, fit3)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm (Fertility ~Agriculture, swiss)
fit3 <- lm (Fertility ~Agriculture+Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore,"binomial", ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
type anova(mdl)
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
View(hits)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
install.packages("MASS")
library(MASS)
data("shuttle")
?shuttle
view(shuttle)
View(shuttle)
fit <- glm(use ~ wind, binary, shuttle)
fit <- glm(use ~ wind, binomila, shuttle)
fit <- glm(use ~ wind, binomial, shuttle)
summary(fit)
data(shuttle)
new_shuttle=mutate(shuttle,autobin= ifelse(use=='auto',1,0))
logfit = glm(new_shuttle$autobin~factor(new_shuttle$wind)-1,family="binomial")
coeff=summary(logfit)$coeff[,1]
ans=exp(coeff[1]-coeff[2])
ans
library(dplyr)
data(shuttle)
new_shuttle=mutate(shuttle,autobin= ifelse(use=='auto',1,0))
logfit = glm(new_shuttle$autobin~factor(new_shuttle$wind)-1,family="binomial")
coeff=summary(logfit)$coeff[,1]
ans=exp(coeff[1]-coeff[2])
ans
summary(logfit)
logfit = glm(new_shuttle$autobin~factor(new_shuttle$wind),family="binomial")
coeff=summary(logfit)$coeff[,1]
ans=exp(coeff[1]-coeff[2])
factor(new_shuttle$wind)head
ans
logfit = glm(new_shuttle$autobin~factor(new_shuttle$wind)-1,family="binomial")
coeff=summary(logfit)$coeff[,1]
ans=exp(coeff[1]-coeff[2])
ans
logfit = glm(new_shuttle$autobin~factor(new_shuttle$wind)+new_shuttle$magn-1,family="binomial")
coeff=summary(logfit)$coeff[,1]
ans=exp(coeff[1]-coeff[2])
ans
logfit = glm(-new_shuttle$autobin~factor(new_shuttle$wind)-1,family="binomial")
logfit = glm(new_shuttle$autobin-1~factor(new_shuttle$wind)-1,family="binomial")
logfit = glm(1-new_shuttle$autobin-1~factor(new_shuttle$wind)-1,family="binomial")
logfit = glm(1-new_shuttle$autobin~factor(new_shuttle$wind)-1,family="binomial")
summary(logfit)
data("InsectSprays")
head(InsectSprays)
fit <- glm(count~factor(spray),Poisson,InsectSprays)
fit <- glm(count~factor(spray),family = "Poisson",InsectSprays)
fit <- glm(count~factor(spray),family = poisson,InsectSprays)
summary(fit)
fit <- glm(count~factor(spray)-1,family = poisson,InsectSprays)
summary(fit)
exp(fit$coefficients[1,1]- fit$coefficients[2,1])
exp(fit$coef[1,1]- fit$coef[2,1])
exp(summary(fit)$coef[1,1]- summary(fit)$coef[2,1])
2.67/2.73
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
spline_term = x*(x>0)
regr = cbind(1,x,spline_term)
fit = lm(y~regr-1)
yhat = predict(fit)
plot(x,y,frame=FALSE,pch=21,bg='lightblue',cex=2)
lines(x,yhat,col='red',lwd=2)
install.packages("rpart")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
intrain = createDataPartition(y=segmentationOriginal$Case, p=0.8, list=F)
training = segmentationOriginal[intrain,]
testing = segmentationOriginal[-intrain,]
modFit = train(Case, data=training, method="rpart")
modFit = train(Case ~., data=training, method="rpart")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
intrain = createDataPartition(y=segmentationOriginal$Case, p=0.6, list=F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Class ~ ., method = "rpart", data = training)
fancyRpartPlot(modFit$finalModel)
intrain = createDataPartition(y=segmentationOriginal$Case, p=0.6, list=F)
training <- segmentationOriginal[intrain, ]
testing <- segmentationOriginal[-intrain, ]
training <- segmentationOriginal[intrain, ]
testing <- segmentationOriginal[-intrain, ]
modFit <- train(Class ~ ., method = "rpart", data = training)
fancyRpartPlot(modFit$finalModel)
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
modolive <- train(Area ~ ., method = "rpart", data = olive)
predict(modolive, newdata=newdata)
View(olive)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
modheart <- train(chd~age+obesity+tobacco+typea+ldl, family="binomial", method="glm", data="trainSA")
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missclass(trainsSA$chd, predict(modelSA,newdata=trainSA))
missClass(trainsSA$chd, predict(modelSA,newdata=trainSA))
missClass(trainSA$chd, predict(modelSA,newdata=trainSA))
missClass(testSA$chd, predict(modelSA,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$fy =as.factor(vowel.test$y)
vowel.train$fy =as.factor(vowel.train$y)
View(vowel.test)
install.packages("randomForest")
library(randomForest)
model = randomForest(fy ~., data=vowel.train)
varImp(model)
setwd("~/curso r/curso 8")
library(ggplot2);library(caret);library(dplyr)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
stringsAsFactors = F,
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/training.csv"
)
test <-
read.csv(
"./data/training.csv",
stringsAsFactors = F,
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
stringsAsFactors = F,
na.strings = c("NA", "#DIV/0!", "")
)
}
str(data)
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/training.csv"
)
test <-
read.csv(
"./data/testing.csv",
stringsAsFactors = F,
na.strings = c("NA", "#DIV/0!", "")
)
}
set.seed(9125)
inTrain <- createDataPartition(data, p=.6, list = F)
View(test)
View(data)
set.seed(9125)
inTrain <- createDataPartition(y=data$classe, p=.6, list = F)
training <- data[inTrain,]
validation <- data[-inTrain,]
set.seed(9125)
inTrain <- createDataPartition(y=data$classe, p=.6, list = F)
training <- data[inTrain,]
validation <- data[-inTrain,]
set.seed(9125)
inTrain <- createDataPartition(y = data$classe, p = .6, list = F)
training <- data[inTrain,]
validation <- data[-inTrain,]
str(training)
data$classe
unlink('MLProject_cache', recursive = TRUE)
str(data$classe)
set.seed(9125)
inTrain <- createDataPartition(y = data$classe, p = .6, list = F)
training <- data[inTrain,]
validation <- data[-inTrain,]
str(training)
set.seed(9125)
inTrain <- createDataPartition(y = data$classe, p = .6, list = F)
training <- data[inTrain,]
validation <- data[-inTrain,]
str(training)
View(data)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/testing.csv"
)
test <-
read.csv(
"./data/testing.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
set.seed(9125)
inTrain <- createDataPartition(y = data$classe, p = .6, list = F)
if (!file.exists("./data/training.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/training.csv"
)
data <-
read.csv(
"./data/training.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
if (!file.exists("./data/testing.csv")) {
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/testing.csv"
)
test <-
read.csv(
"./data/testing.csv",
na.strings = c("NA", "#DIV/0!", "")
)
}
